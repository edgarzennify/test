<apex:page docType="html-5.0"
    controller="SynchronizationResultsController" 
    showHeader="false" 
    LightningStylesheets="true">
    
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" />
    <!--<link rel="stylesheet" href="Results.css" />-->
    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.1/react.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.1/JSXTransformer.js"></script>
    <title>Synchronization Results</title>
    <style>
        .result-value {
            color: green;
            font-weight: bold;
        }
        
        .other-value {
            color: silver;
        }
        
        .lowlight {
            color: gray;
        }
        
        h3 {
            margin-top: 5px;
            display: block;
        }
        
        #loader-pane {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1000;
            background-color: lightgray;
            opacity: .8;
        }
        
        .loader {
            position: absolute;
            top: 50%;
            margin-top: -32px; /* -1 * image height / 2 */
            display: block;
        }
    </style>
    <div id="container" />
    <script type="text/jsx">
        var Heading = React.createClass({
          render: function (){
            return (
                <div className="page-header">
                    <small className="lowlight"><i className="fa fa-refresh fa-border fa-pull-left fa-3x"></i>Synchronization Details</small>
                    <h3>{this.props.title}</h3>
                    <small>Synchronization Date:</small> {this.props.syncDate}
                </div>
              )
          }
        })
    
        var Details = React.createClass({
          render: function(){
            return (
                <div>
                {
                  this.props.data.map(function(d){
                    return <Field fieldName={d.field} results={d.results} />
                  })
                }
                </div>
              )
          }
        })
    
        var Field = React.createClass({
          render: function(){
            return (
                <div className="panel panel-default">
                  <div className="panel-heading">{this.props.fieldName}</div>
                  <div className="panel-body">
                    <table className="table table-condensed">
                    {
                      this.props.results.map(function(r){
                        return <Result source={r.source} value={r.value} isResultValue={r.is_result_value} />
                      })
                    }
                    </table>
                  </div>
                </div>
              )
          }
        })
    
        var Result = React.createClass({
          render: function () {
            var rowClass = this.props.isResultValue == true ? "result-value success" : "other-value";
            var iconClass = this.props.isResultValue == true ? "fa fa-check fa-fw" : "fa fa-times fa-fw";
            return (
                  <tr className={rowClass}>
                    <td className="col-xs-4 col-sm-2">
                      <i className={iconClass}></i> {this.props.source}
                    </td>
                    <td>{this.props.value}</td>
                  </tr>
              )
          }
        })
    
        var SynchronizationDetails = React.createClass({
          render: function () {
            return this.props.details.length != 0 || this.props.loading == true
                ? (
                    <div className="container">
                      <Heading title={this.props.title} syncDate={this.props.syncDate} />
                      <Details data={this.props.details} />
                    </div>
                  )
                : (
                    <div className="container">
                    {this.props.loading}
                      <Heading title={this.props.title} syncDate={this.props.syncDate} />
                      <WarningMessage message="No results found" />
                    </div>
                  )
          }
        })
    
        var Loader = React.createClass({
          render: function(){
            return this.props.loading 
              ? 
                <div id="loader-pane">
                  <div className="loader col-md-4 col-md-offset-4 col-sm-6 col-sm-offset-4">
                    <table>
                      <tr>
                        <td className="col-xs-1"><i className="fa fa-cog fa-spin fa-4x"></i></td>
                        <td className="h4">{this.props.message}</td>
                      </tr>
                    </table>
                  </div>
                </div> 
              : 
                <div></div>
          }
        })
        
        var ErrorMessage = React.createClass({
            render: function(){
                return (
                    <div className="container">
                        <br/>
                        <div className="alert alert-danger" role="alert">
                            <b>ERROR!</b> {this.props.message}
                        </div>
                    </div>
                )
            }
        })
        
        var WarningMessage = React.createClass({
            render: function(){
                return (
                    <div className="container">
                        <br/>
                        <div className="alert alert-warning" role="alert">
                            <b>Warning!</b> {this.props.message}
                        </div>
                    </div>
                )
            }
        })
    
        var SynchronizationDetailsController = React.createClass({
            getInitialState : function(){
                return {data:[], loading:false};
            },
            componentDidMount: function(){
                this._loadAsync();
            },
            _loadAsync : function(){
                this.setState({loading:true});
                var _this = this;
                Visualforce.remoting.Manager.invokeAction(this.props.remoteAction
                    ,this.props.remoteActionParam
                    ,function(result, event){
                        if (event.status) {
                            if(result != null && result != ''){
                                _this.setState({data: JSON.parse(result)});
                            }
                            _this.setState({loading: false});      
                        } else if (event.type === 'exception') {
                            _this.setState({loading: false});
                        } else {
                            _this.setState({loading: false});
                        }
                     }
                     ,{escape: false}
                );
            },
            render: function(){
                return this.props.error == '' 
                    ? (                
                      <div>
                        <Loader 
                          loading={this.state.loading} 
                          message="Retrieving synchronization details" />
                        <SynchronizationDetails
                          title={this.props.title}
                          syncDate={this.props.syncDate}
                          details={this.state.data}
                          loading={this.state.loading} />
                      </div>
                      )
                   : (
                      <ErrorMessage message={this.props.error} />
                   )
                   
          }
        })
            
        React.render(
          <SynchronizationDetailsController 
              remoteAction="{!$RemoteAction.SynchronizationResultsController.ResultsByBatch}"
              remoteActionParam="{!entityJson}"
              title="{!title}"
              syncDate="{!synchronizationDate}"
              error="{!error}" />,
          document.getElementById("container")
        );
    </script>
</apex:page>